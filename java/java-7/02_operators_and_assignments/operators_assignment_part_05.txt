Operators & Assignments - Part-05: assignment operators
--------------------------------------------------------

	- Assignment Operator:
	
		- There are three types of assignment operators.
		
			- Simple Assignment Operator:
			
				int x = 10;
				
			- Chained Assignment Operator:
			
				int a, b, c, d;
			
				a=b=c=d=20;
				
				System.out.println(a+"..."+b+"..."+c+"..."+d);
				
				- Note: We can't perform chained assignment directly at the time of declaration.
				
				- Example_1
				
					int a, b, c, d = 20; // Note- compliler will consider only the first declaration which is int a. Other it doesn't consider as dec.
					
					CE: cannot find symbol
						symbol: variable b
						location: class Test
						
					CE: cannot find symbol
						symbol: variable c
						location: class Test

					CE: cannot find symbol
						symbol: variable d
						location: class Test
						
				- Example_2:
				
					int b, c, d;
					int a=b=c=d=20; // This is valid as we declared (b, c and d) in the first line.
				
			- Compound Assignment Operator:
			
				- Sometimes assignment operator mixed with someother operator such type of assingment operators are called compound assignment
				  operators.
				  
				- Example:
				
					int a = 10;
					
					a+=20;
					
					System.out.println(a); // 30
					
				- The following are all possible compound assignment opertors in Java.
				
					+=				&=		>>=    right shift   - >> 2 - this will shift the last two digit and add a signed bit in the empty cell
					
					-+				|=		>>>=   unsigned right shift or zero filled right shit - this doesn't add a signed add 0 instead.
					
					*=				^=		<<=
					
					/=
					
					%=
					
				- In the case of compound assignment opertors internal type casting will be performed automatically.
				
					- Example_1:
				
						byte b = 10;
						
						b = b+1;
						
						System.out.println(b);
						
						b+1 = max(int, byte, int) ==> so the return type of b+1 is integer, we can't assign integer to a byte. CE
					
						CE: possible loss of precision.
						
					- Example_2:
					
						byte b = 10;
						
						b++;
						
						System.out.println(b);
						
						b++ ==> b = (byte) (b+1);
						
						Output: 11
						
					- Example_3:
					
						byte b = 10;
						
						b += 1;
						
						System.out.println(b);
						
						b +=1 ==> b = (byte) (b+1);
						
						So we won't get any compile time error.
						
						Output: 11
						
					- Example_4:
					
						int a, b, c, d;
						
						a = b = c = d = 20;
						
						a + = b-= c*= d/=2;
						
						System.out.println(a+"..."+b+"..."+c+"..."+d);
						
						Note: In general the evaluation starts from right to left.
						
						Output:
						
						-160	-180	200		10
						
	- Conditional Operator: (?, :)
	
		- Operator naming reason:
		
			- Increment operators can have only one operand, so they are called "Unary Operator"
			
				a++, ++a
				
			- Arithmetic operators can have two operands, so they are called "Binary Operator"
			
				a+b
				
			- Conditional opertor can have three operands, so they are called "Ternary Opertor"
			
				int x = (10 > 20) ? 30: 40
				
				(10 > 20 ) ==> first operand
				
				? 30 ==> second operand
				
				: 40 ==> third operand.
				
		- Note: We can call "Conditional operator as Ternary operator"
	
		- The only possible ternary operator in Java is conditional operator.
		
		- Syntax:
		
			int x = (10 < 20) ? 30 : 40
			System.out.println(x);
			// 30
			
		- We can perform nesting of conditional opertor also.
			
			int x = (10 > 20) ? 30 : ((40 > 50) ? 60: 70)
			
			System.out.println(x);
			
			//70
			
	- new operator:
	
		- We can use new operator to create object.
		
		- Example:
		
			Test t = new Test();
			
		- Note: 
		
			- After creating an object constructor will be executed to perfrom initialization of an object. Hence constructor is not for creation of
			  object and it is for initilization of an object.
			  
			- In Java we have only "new" keyword but not "delete", because of destruction of useless objects is the responsibility of GC.
				
				GC ==> Garbage collector.
				
				
	- [] operator:
	
		- We can use this operator to declare and create arrays.
		
		- Example:
		
			int[]  x = new int[10];