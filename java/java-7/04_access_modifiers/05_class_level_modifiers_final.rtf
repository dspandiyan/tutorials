{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17920\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Declarations & Access Modifiers - Part-05 - Class level modifiers - Final:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
	- Class level modifiers:\
\
		- Whenever we are writing our own classes we have to provide some information about our class to the JVM, like\
\
			- Whether this class can be accessible from anywhere or not? \
\
			- Whether child class creation is possible or not?\
\
			- Whether object creation is possible or not?\
\
		- We can specify these information by using appropriate modifiers.\
\
		- The following are the list of modifiers available in Java:\
\
			public		final 			native\
\
			private 		abstract			strictfp\
\
			default		static			transient\
\
			protected	synchronised		volatile\
\
		- The only applicable modifier for top level classes are:\
\
			public \
\
			default\
\
			final\
\
			abstract\
\
			strictfp\
\
		- But for inner classes the applicable modifiers are:\
\
			public \
\
			default           +      private\
\
			final.                      protected\
\
			abstract.               static\
\
			strictfp		 \
\
\
		- Example:\
\
\
			private class Test\{\
				public static void main(String[] args)\{\
					System.out.println(\'93Hello\'94);\
				\}\
			\}\
\
			Output: CE: modifier private not allowed here\
\
		- Access specifiers VS Access Modifiers:\
\
			- public, private, protected, default are considered as specifiers except these remaining are considered as modifiers.\
\
			- But this rule is applicable only for old languages like C++ but not in Java.\
\
			- In Java all are considered as modifiers only there is no word like specifier.\
\
			- Example:\
\
				private class Test\{\
					public static void main(String[] args)\{\
						System.out.println(\'93Hello\'94);\
					\}\
				\}\
\
				Output: CE: \'93modifier\'94 private not allowed here\
\
		- public classes:\
	\
			- If a class declared as public then we can access that class from anywhere.\
\
			- Example:\
\
				package pack1;\
\
				public class A\{\
					public void m1()\{\
						System.out.println(\'93Hello\'94);\
					\}\
				\}\
\
				javac -d . A.java\
\
				package pack2;\
\
				import pack1.A;\
\
				class B\{\
					public static void main(String[] args)\{\
						A a = new A();\
						a.m1();\
					\}\
				\}\
\
				javac -d . B.java\
\
				java pack2.B\
\
				Output: Hello\
\
				- If class A is not public then while compiling B class we will get compile time error saying: pack1.A is not public in pack1; cannot be accessed from outside package\
\
		- Default classes:\
\
			- If a class declared as default then we can access that class only within the current package that is from outside package we can\'92t access. Hence default access is also known as package level access.\
\
		- final modifier:\
\
			- final is the modifier applicable for classes, methods and variables.\
\
		- final method:\
\
			- Whatever method parent has by default available to the child through inheritance if the child not satisfied with parent method implementation then child is allowed to redefine that method based on its requirement. This process is called overriding.\
\
			- If the parent class method is declared as final then we cannot override that method in the child class. Because it\'92s implementation is final.\
\
			- Example:\
\
\
				class P\{\
					public void property()\{\
						Systemm.out.println(\'93Cash+land+gold\'94);\
					\}\
\
					public final void marry()\{\
						System.out.println(\'93Subbalakshmi\'94);\
					\}\
				\}\
\
				class C extends P\{\
					public void marry()\{\
						System.out.println(\'933sha|9tara\'94);\
					\}\
				\}\
\
				CE: marry() in C cannot be override marry() in P; overridden method is final.\
\
		- final class:\
\
			- If a class declared as final we cannot extend functionality of that class. That is we can create child class for that class. This is inheritance is not possible for final classes.\
\
			- Example:\
\
				final class P\{\
				\}\
\
				class C extends P\{\
				\}\
\
				Output: CE: cannot inherit from final P\
\
			- Note:\
\
				- Every method present inside final class is always final by default. But every variable present inside final class need not be final.\
\
				- Example:\
\
						final class P\{\
							static int x = 20;\
\
							public static void main(String[] args)\{\
								x = 777;\
								System.out.println(x);\
							\}\
						\}\
\
				- The main advantage of final keyword is we can achieve security and we can provide unique implementation.\
\
				- But the main disadvantage of final keyword is we are missing key benefits of OOPS\
\
					- Inheritance (because of final classes)\
\
					- Polymorphism (because of final methods)\
\
				- Hence if there is no specific requirement then it is not recommended to use, final keyword.\
				\
\
				\
		}