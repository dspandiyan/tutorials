{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Declarations & Access Modifiers - Part-04 - package statement:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
	- package statement:\
\
		- It is an encapsulation mechanism to group related classes and interfaces into a single unit, which is nothing but package.\
\
		- Example_01:\
\
			- All classes and interfaces which are required for database operations are grouped into a single package which is nothing but \'93java.sql\'94 package.\
\
		- Example_02:\
\
			- All classes and interfaces which are useful for file IO operations are grouped into a separate package which is nothing but \'93java.io\'94 package.\
\
		- The main advantages of package are:\
\
			- To resolve naming conflicts. (That is unique identification of our components).\
\
			- It improves modularity of the application.\
\
			- It improves maintainability of the application.\
\
			- It provides security for our components.\
\
		- There is one universally accepted naming convention for packages, that is to use internet domain name in reverse.\
\
		- Example:\
\
			com.icicibank.loan.housing.Account\
\
			com.icicibank \'97> Is client internet domain in reverse.\
\
			loan \'97> Is the module.\
\
			housing \'97> Is sub module.\
\
			Account \'97> Class name.\
\
		- How to compile and run the class with package name in command line:\
\
			package com.durgsoft.scjp;\
\
			public class Test\{\
				public static void main(String[] args)\{\
					System.out.println(\'93Package demo\'94);\
				\}\
			\}\
\
			1) javac Test.java\
\
				- Generated .class file will be placed in corresponding will be placed in current working directory.\
\
				CWD\
				   | \'97 Test.java\
\
			2) javac -d . Test.java\
\
				-d \'97> Destination to place generated class files.\
\
				 . \'97> Means current working directory.\
\
				- Generated .class file will be placed in corresponding package structure.\
\
					CWD\
					    | \'97 com\
							| \'97 durgasoft\
									| \'97 scjp\
										 | \'97 Test.java\
\
				- If the corresponding package structure not already available then this command itself will create corresponding package structure.\
\
				- As destination instead of . We can take any valid directory name:\
\
					- Example:\
\
							javac -d F: Test.java\
\
					F:\
					    | \'97 com\
							| \'97 durgasoft\
									| \'97 scjp\
										 | \'97 Test.java\
\
				- If the specified directory not already available then we will get compile time error.\
\
					- Example:\
\
						 javac -d Z: Test.java\
\
						- If Z: not available then we will get compile time error saying: \'93directory not found: Z:\'94 \
\
				- At the time of execution, we have to use fully qualified name.\
\
				- Example:\
\
					java com.durgasoft.scjp.Test\
\
					Output: Package demo\
\
	- Conclusion:\
\
		- Conclusion_01:\
\
			- In any java source file there can be utmost one package statement that is more than one package statement is not allowed, otherwise we will get compile time error.\
\
			- Example:\
\
				package pack1;\
\
				package pack2;\
\
				public class A\{\
				\}\
\
				javac A.java\
\
				Output: CE: class, interface or enum expected\
\
		- Conclusion_02:\
\
			- In any java program the first non-comment statement should be package statement (If it is available) otherwise we will get compile time error.\
\
			- Example:\
\
				import java.util.*;\
\
				package pack1;\
\
				public class A\{\
				\}\
\
				Output: CE: class, interface or enum expected.\
\
		- The following are valid java source file structure:\
\
			package statement // Utmost one\
\
			import statements // Any number\
\
			class, interface or ENUM declarations // Anynumber\
\
			Note: The order is important.\
\
			Note:\
\
				- An empty source file is a valid java program, hence the following are valid java source files.\
\
\
				- Example_01:\
\
					Test.java (empty source file)\
\
				- Example_02:\
\
					package pack1;\
\
				- Example_03:\
\
					import java.uti.*;\
\
				- Example_04:\
\
					package pack1;\
\
					import java.util.*;\
\
				- Example_05:\
\
					class Test\{\
					\}\
}