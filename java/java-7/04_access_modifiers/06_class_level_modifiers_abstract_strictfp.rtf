{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Declarations & Access Modifiers - Part-06 - Class level modifiers - Abstract & Strictfp:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
	- abstract modifier:\
\
		- abstract is a modifier applicable for classes and methods but not for variables.\
\
		- abstract method:\
\
			- Even-though we don\'92t know about implementation still we can declare a method with abstract modifier that is for abstract methods only declaration is available but not implementation. Hence abstract method declaration should ends with ;\
\
			- Example:\
\
				public abstract void m1();\
\
				public abstract void m1 \{\} // Invalid\
\
			- Child class is responsible to provide implementation for parent class abstract methods.\
\
			- Example:\
\
				abstract class Vehicle\{\
					abstract public int getNoOfWheels();\
				\} \
\
				class Bus extends Vehicle\{\
					public int getNoOfWheels()\{\
						return 7;\
					\}			\
				\}\
\
				class Auto extends Vehicle\{\
					public int getNoOfWheels()\{\
						return 3;\
					\}\
				\}\
\
			- By declaring abstract method in the parent class, we can provide guidelines to the child classes such that which methods compulsory child has to implement.\
\
			- Abstract method never talks about implementation, if any modifier talks about about implementation then it forms illegal combination with abstract modifier.\
\
			- The following are various illegal combinations of modifiers for method with respect to abstract\
\
				abstract final\
\
				abstract native\
\
				abstract synchronised \
\
				abstract static\
\
				abstract private\
\
				abstract strictfp\
\
				- Example:\
\
					abstract final void m1();\
\
					CE: illegal combination of modifiers abstract and final.\
\
		- Abstract class:\
\
			- For any Java class if we are not allowed to create an object (because of partial implementation) such type of class we have to declare with abstract modifier. That is for abstract classes instantiation is not possible. \
\
			- Example:\
\
				abstract class Test\{\
					public static void main(String[] args)\{\
						Test t = new Test();\
					\}\
				\}\
\
				CE: Test is abstract; cannot be instantiated\
\
			- Abstract class VS Abstract Method:\
\
				- If a class contains at least one abstract method then compulsory we should declare class as abstract, otherwise we will get compile time error.\
\
				- Reason:\
\
					- If a class contains at least one abstract method, then implementation is not complete and hence it\'92s not recommended to create object. To restrict object instantiation compulsory we should declare class as abstract.\
\
					- Even though class doesn\'92t contain and abstract method still we can declare class as abstract if we don\'92t want instantiation. That is abstract class can contain 0 number of abstract methods also.\
\
					- Example_01:\
\
						HttpServlet is abstract but it doesn\'92t contain any abstract methods.\
\
					- Example_02:\
\
						Every adapter class is recommended to declare as abstract but it doesn\'92t contain any abstract method.\
\
			- Example_01:\
\
				class P\{	\
					public void m1();\
				\}\
\
				Output: CE: missing method body or declare abstract\
\
			- Example_02:\
\
				class P\{	\
					public abstract void m1()\{\}\
				\}\
				\
				Output: CE: abstract methods cannot have a body\
\
			- Example_03:\
\
				class P\{	\
					public abstract void m1();\
				\}\
\
				CE: 	 P is not abstract and doesn\'92t override abstract method m1 in P\
\
			- Example_04:\
\
				- If we are extending abstract class then for each and every abstract method of parent class, we should provide implementation otherwise we have to declare child class as abstract.\
\
				- In this case next level child class is responsible to provide implementation.\
\
				abstract class P\{\
					public abstract void m1();\
\
					public abstract void m2();\
				\}\
\
				class C extends P\{\
					public void m1()\{\}\
				\}\
\
				Output: CE: C is not abstract and doesn\'92t override abstract method m2 in P.\
\
\
		- Final vs Abstract:\
\
			- Abstract methods compulsory we should override in child classes to provide implementation. Whereas we can\'92t override final methods hence final abstract combination is illegal combination for methods.\
\
			- For final classes we can\'92t create child class whereas for abstract classes we should create child class to provide implementation. Hence final abstract combination is illegal for classes.\
\
			- Abstract class can contain final method whereas final class can\'92t abstract method.\
\
				abstract class Test\{\
					public final void m1()\{\
					\}\
				\}\
\
				final class Test\{\
					public abstract void m1();\
				\}\
		\
			- Note: \
\
				- It is highly recommended to use abstract modifier because it promotes several OOP features like (Inheritance and polymorphism).\
				\
\
			}