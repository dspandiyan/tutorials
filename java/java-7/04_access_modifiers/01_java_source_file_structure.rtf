{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Declarations & Access Modifiers - Part-01 - Java class file structure:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\fs28 - Java Class File Structure:\
	\
	- A Java program can contain any number of classes. But utmost once class can be declared as public.\
\
	- If there is a public class then name of the program and name of the public class must be matched, otherwise we will get compile time error.\
	\
	- case_01:\
	\
			- If there is no public class, then we can use any name and there are no restrictions.\
	\
		- Example:\
\
\
		class A\{\
		\}\
\
		class B\{\
		\}\
\
		class C\{\
		\}\
\
		- We can save the above Java file named Saravana.java also.\
\
\
	- case_02:\
\
		- If class B is public then name of the program should be B.java, otherwise we will get compile time error saying.\
\
			class B is public, should be declared in a file named B.java.\
\
		- Example:\
\
			class A\{\
			\}\
\
			public class B\{\
			\}\
\
			class C\{\
			\}\
\
	- case_03:\
\
		- Example_01:\
\
		- If class B and C declared as public and the name of the program is B.java, then we will get compile time error saying.\
\
			class C is public, should be declared in a file named C.java\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 			class A\{\
			\}\
\
			public class B\{\
			\}\
\
			class C\{\
			\}\
\
			Output:\
\
			class C is public, should be declared in a file named C.java\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
		- Example_2:\
	\
			class A\{\
				public static void main(String[] args)\{\
					System.out.println(\'93A class main\'94);\
				\}\
			\}\
\
			class B\{\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 				public static void main(String[] args)\{\
					System.out.println(\'93B class main\'94);\
				\}\
			\}\
\
			class C\{\
				public static void main(String[] args)\{\
					System.out.println(\'93C class main\'94);\
				\}\
			\}\
\
			class D\{\
			\}\
\
			- Save the program name as Durga.java\
\
				javac Durga.java\
\
					- This will generate the following classes:\
\
						A.class\
\
						B.class\
\
						C.class\
\
						D.class\
\
			Output:\
\
				java A\
\
				A class main\
\
				java B\
\
				B class main\
\
				java C\
\
				C class main\
\
				java D\
\
				RE: NoSuchMethodError: main\
\
				java Durga\
\
				RE: NoClassDefFoundError: Durga\
\
			- Note: We can compile the program name. But can run only the class name, not the program name.\
\
		- Conclusions:\
\
			- Whenever we are compiling a Java program for every class present in that program a separate .class file will be generated.\
\
			- We can compile a Java program (Java source file), but we can run a Java .class file.\
\
			- Whenever we are executing a Java class that corresponding class main method will be executed. If the class doesn\'92t contain main method, then we will get runtime exception saying, NoSuchMethodError: main\
\
			- If the corresponding .class file not available then we will get RE saying NoClassDefFoundError: Durga\
\
			- It is not recommended to declare multiple classes in a single source file.\
			\
				- It is highly recommended to declare only one class per source file and name of the program we have to keep same as class name.\
\
				- The main advantage of this approach is readability and maintainability of the code will be improved.\
\
	- import statement:\
\
		class Test\{	\
			public static void main(String[] args)\{\
				ArrayList al = new ArrayList();\
			\}\
		\}\
\
		Output:\
\
			CE: cannot find symbol \
				symbol: class ArrayList\
				location: class Test\
\
		- We can solve this problem by using fully qualified name.\
\
			java.util.ArrayList al = new java.util.ArrayList();\
\
			\'93java.util.ArrayList\'94 \'97> Fully qualified name.\
\
		- The problem with usage of fully qualified name every is, it increases length of the code and reduces readability.\
\
		- We can solve this problem by using import statement.\
\
		- Whenever we are writing import statement it is not required to use fully qualified name everytime. We can use short name directly.\
\
			import java.util.ArrayList;\
			\
			class Test\{	\
				public static void main(String[] args)\{\
					ArrayList al = new ArrayList();\
				\}\
			\}\
\
			\'91\'93ArrayList\'94 \'97> Short name.\
\
		- Hence import statement acts as typing shortcut.}