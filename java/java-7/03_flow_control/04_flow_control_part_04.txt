Flow-Control - Part-04: Iterative Statements (while, do-while)
--------------------------------------------------------------

	- Iterative statements (while):
	
		- If we don't know number of iterations in advance, then we should go for while loop.
		
		- Example:
		
			while(rs.next()){
			}
			
			while(e.hasMoreElements()){
			}
			
			while(itr.hasNext()){
			
			}
			
	- Syntax:
	
		while(b){
			action;
		}
		
		b ==> Should be boolean type.
		
		- The argument should be boolean type, if we are trying to provide any other type, then we will get compile time error.
		
		- Example:
		
			while(1){
				System.out.println("Hello");
			}
			
			Output: CE: incompatible types
						found: int
						required: boolean
						
		 - Curly braces are optional and without curly braces we can take only one statement under while. Which should not be declarative statement.
		 
			- Example:
			
				while(true)
					System.out.println("Hello");
					
				// Valid
				
				while(true); //Valid
				
				while(true)
					int x = 10; // Invalid
					
				while(true){
					int x = 10;
				}
				
				// Valid
				
	- while loopholes:
	
		- Example_1:
		
			while(true){
				System.out.println("Hello");
			}
			
			System.out.println("Hi");
			
			Output: CE: unreachable statement //sysout Hi, because the first loop executes infinite times, so the control wont reach the next line.
			
		- Example_2:
		
			while(false){	
				System.out.println("Hello");
			}
			
			System.out.println("Hi");
			
			Output: CE: unreachable statement { // The content within the curly braces itself not reachable.
			
		- Example_3:
		
			int a = 10, b = 20;
			
			while(a < b){
				System.out.println("Hello");
			}
			
			System.out.println("Hi");
			
			Output:
			
				Hello
				
				Hello
				
				Hello
				
				Hello
				  .
				  .
				  .
				  .
			
			Note: In this case, JVM will not throw any error, as there is a chance of changing the value of a at runtime.
			
		- Example_4:
		
			int a = 10, b = 20;
			
			while(a > b){
				System.out.println("Hello");
			}
			
			System.out.println("Hi");
			
			Output: 
			
			Note: In this case, JVM will not throw any error, as there is a chance of changing the value of a at runtime.
			
		- Example_5:
		
			final int a = 10, b = 20;
			
			while(a < b){
				System.out.println("Hello");
			}
			
			System.out.println("Hi");
			
			Output: CE: unreachable statement // sysout of hi
			
		- Example_6:
		
			final int a = 10, b = 20;
			
			while(a > b){
				System.out.println("Hello");
			}
			
			System.out.println("Hi");
			
			Output: CE: unreachable statement { // sysout of hi
			
	- Note:
	
		- Every final variable will be replaced by the value at compile time only.
		
		- Example_1:
		
			final int a = 10;
			
			int b = 20;
										After compilation
			System.out.println(a);  ========================> System.out.println(10);
			
			
										After compilation
			System.out.println(b);  ========================> System.out.println(b);
		
			
		- If every argument is a final varialbe ( compile time constant) then that operation should be performed at compile time only.
		
		- Example_2:
		
			final int a =10, b = 20;
			
			int c = 20;
										After compilation
			System.out.println(a+b); ========================> System.out.println();	
										
										
										After compilation
			System.out.println(a+c); ========================> System.out.println();
			
			
										After compilation
			System.out.println(a<b); ========================> System.out.println();
			
			
										After compilation
			System.out.println(a<c); ========================> System.out.println();
			
	- do-while:
	
		- If we want to execute loop body at least once then we should go for do-while.
		
		- Syntax
		
			do{
				body
			} while(b);
			
			b ===> Should be boolean
			
			; ===> is mandatory
			
		- Curly braces are optional and without curly braces we can take only one statement between do and while which should not be declarative stmt.
		
		- Example:
		
			do
				System.out.println("Hello")-
			while(true);
			
			// Valid
			
			do;
			while(true);
			
			// Valid
			
			do
				int x = 10;
			while(true);
			
			// Invalid
			
			do{
				int x = 10;
			}while(true)
			
			// Valid
			
			do
			while(true);
			
			// Invalid
			
		- Example:
		
			do while(true)
			System.out.println("Hello");
			while(false);
			
			do
			  while(true)
				System.out.println("Hello");
			while(false);
			
			// Valid and it prints the Hello infinite times.
			
			Hello
			
			Hello
			
			Hello
			
			Hello
			  .
			  .
			  .
			  .
			  
	- Unreachable is a problem even in do-while:
	
		- Example_1:
		
			do{
				System.out.println("Hello");
			} while(true);
			System.out.println("Hi");
			
			// Invalid
			
			CE: unreachable statement // sysout of Hi
			
		- Example_2:
		
			do{
				System.out.println("Hello");
			}while(false);
			System.out.println("Hi");
			
			// Valid
			
			Output:
			
				Hello
				
				Hi
				
		- Example_3:
		
			int a = 10, b = 20;
			
			do{
				System.out.println("Hello");
			} while(a < b)
				System.out.println("Hi");
				
			// Valid
			
			Output:
			
				Hello
				Hello
				Hello
				Hello
				Hello
				  .
				  .
				  .
				  .
				  
		- Example_4:
		
			int a = 10, b = 20;
			
			do{
				System.out.println("Hello");
			} while(a > b);
			
				System.out.println("Hi");
				
			// Valid
			
			Output:
			
				Hello
				
				Hi
				
		- Example_5:
		
			final int a = 10, b = 20;
			
			do{
				System.out.println("Hello");
			} while(a < b);
				System.out.println("Hi);
				
			// Invalid
			
			CE: unreachable statement // sysout of Hi
			
		- Example_6:
		
			final int a = 10, b = 20;
			
			do{
				System.out.println("Hello");
			} while();
				System.out.println("Hi");
				
			// Valid
			
			Output:
			
				Hello
				
				Hi