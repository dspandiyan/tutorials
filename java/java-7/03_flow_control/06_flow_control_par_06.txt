Flow-Control - Part-05: Transfer Statements (break, continue)
--------------------------------------------------------------

	- Iterative Statements:
	
		- We can use break statement in the following places.
		
			- Inside switch:
				
				- To stop fall through.
			
				int x = 0;
				
				switch(x){
					case 0:
					
						System.out.println(0);
						
					case 1:
					
						System.out.println(1);
						break;
						
					case 2:
					
						System.out.println(2);
						
					default:
					
						System.out.println("default");
				}
				
				Output: 0
						1
			
			- Inside loops:
			
				- To break loop execution based on some condition.
				
				for(int i =0 ; i< 10; i++){
					if( i == 5)
						break;
					System.out.println(i);
				}
				
				Output: 
				
					0
					1
					2
					3
					4
			
			- Inside labeled blocks:
			
				- To break block execution based on some condition.
				
					class Test{
						public static void main(String[] args){
							int x = 10;
							
							l1:{
								System.out.println("begin");
								if(x == 10)
									break l1;
								System.out.println("end");
							}
							
							System.out.println("Hello");
						}
					}
					
					Output:
					
						begin
						
						Hello
						
		-  These are the only places where we can use break statements, If we are using anywhere else we will get compile time error saying
		   "break outside switch or loop".
		
			- Example:
			
				class Test{
					public static void main(String[] args){
						int x = 10;
						
						if(x == 10)
							break;
						System.out.println("Hello");
					}
				}
				
				Output:
				
					CE: break outside switch or loop.
					
	- continue statement:
	
		- We can use continue statement inside loops to skip current iteration, and continue for the next iteration.
		
		- Example:
		
			for(int i =0; i< 10; i++){
				if(i % 2 == 0)
					continue;
				System.out.println(2);
			}
			
			Output:
			
				1
				3
				5
				7
				9
				
		- We can continue statement only inside loops, if we are using anywhere else we will get compile time error saying.
		  "continue outside loop"
		  
			- Example:
			
				class Test{
					public static void main(String[] args){
						int x = 10;
						
						if(x == 10)
							continue;
						System.out.println("Hello");
					}
				}
				
				Output:
				
					CE: continue out of loop
					
	- Labeled break and continue:
	
		- We can use labeled break and continue to break or continue a particular loop in nested loops.
		
		- Example:
		
			for(; ;){
				for( ; ;){
					for( ; ;){
						break;
					}
				}
			}
			
			The above break statement will break the inner most for loop, not the other for loop, if we want to break the other for loop then go for 
			labeled break.
			
			l1:
			for(; ;){
				l2:
				for( ; ;){
					l3:
					for( ; ;){
						break l1;
						
						break l1;
						
						break l3;
					}
				}
			}
			
		- Example:
		
			l1:
			for(int 1=0; i < 3; i++){
				for(int j = 0; j< 3; j++){
					if( i == j)
						// break, break 1i, continue, continue l1;
					System.out.println(i+"..."+j);
				}
			}
			
			Output:
			
			break;
			
			1...0
			2...0
			2...1
			
			break l1;
			
			No Output
			
			continue;
			
			0...1
			0...2
			1...0
			1...2
			2...0
			2...2
			
			continue l1;
			
			1...0
			2...0
			2...1
			
	- do-while vs continue:
	
		- Example:
		
			int x = 0;
			
			do{
				x++;
				System.out.println(x);
				if(++x < 5)
					continue;
				x++;
				System.out.println(x);
			}while(++x < 10);
			
			Output:
			
				1
				
				4
				
				6
				
				8
				
				10
				
			Note: In the other loops control goes directly to the start of the loop, whenever it executes contiune. But in do-while the control goes
			      to the while check based on the while check result the loop will execute.
				